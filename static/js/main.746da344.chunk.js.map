{"version":3,"sources":["components/Start.js","components/QuestionHeader.js","components/QuestionBox.js","components/QuestionOptions.js","components/Question.js","components/End.js","App.js","serviceWorker.js","index.js"],"names":["Start","getMinutes","Math","floor","random","getGreeting","hour","Date","getHours","react_default","a","createElement","style","marginTop","this","fontSize","width","margin","props","length","Button","onClick","handleStart","React","Component","QuestionHeader","textAlign","counter","question","QuestionBox","_this","console","log","checkArray","questions","map","x","index","key","color","end","QuestionOptions","options","fluid","handleClick","darkMode","Question","Fragment","Header","as","components_QuestionBox","Divider","components_QuestionHeader","components_QuestionOptions","End","correct","handleRestart","App","state","correctAnswer","checkIfCorrect","e","target","innerHTML","setState","push","preventDefault","_this2","Container","height","padding","backgroundColor","components_Start","components_End","components_Question","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.746da344.chunk.js","sourcesContent":["import React from 'react'\nimport { Button } from 'semantic-ui-react'\n\nclass Start extends React.Component {\n  getMinutes = () => Math.floor(Math.random() * 20)\n  getGreeting = () => {\n    let today = new Date()\n    let hour = today.getHours()\n\n    let greeting = (hour < 12) ? 'Good Morning' : (hour < 18) ? 'Good Afternoon' : 'Good Evening'\n    return greeting\n  }\n  render() {\n    return (\n      <div style={{marginTop: '5rem'}}>\n        <h1>{this.getGreeting()}</h1>\n        <p style={{fontSize: '1.2rem', width: '40vw', margin: 'auto'}}>This quiz is <b>{this.props.length} questions </b> and will take approximately {this.getMinutes()} minutes to complete.</p>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        <Button onClick={this.props.handleStart}>Begin</Button>\n      </div>\n    )\n  }\n}\n\nexport default Start\n","import React from 'react'\n\nconst QuestionHeader = (props) => {\n  return (\n    <h3 style={{textAlign: 'left'}}>{props.counter}) {props.question}</h3>\n  )\n}\nexport default QuestionHeader\n","import React from 'react'\nimport { Button } from 'semantic-ui-react'\n\nclass QuestionBox extends React.Component {\n  render() {\n    console.log(this.props.checkArray)\n    return (\n      <div>\n        {this.props.questions.map((x, index) =>\n          <Button key={Math.random()} color={(this.props.end === false) ? null : ((this.props.checkArray[index] === 'Correct') ? 'green' : 'red')}>\n            {index + 1}\n          </Button>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default QuestionBox\n","import React from 'react'\nimport { Button } from 'semantic-ui-react'\n\nconst QuestionOptions = (props) => {\n  return (\n    <div>\n    {props.options.map(x => <li key={Math.random()}>\n    <Button fluid onClick={props.handleClick} style={{marginTop: '1rem'}} color={(props.darkMode === false) ? 'white' : 'grey'}>\n      {x}\n    </Button></li>)}\n    </div>\n  )\n}\nexport default QuestionOptions\n","import React from 'react'\nimport { Divider, Button, Header } from 'semantic-ui-react'\n\nimport QuestionHeader from './QuestionHeader'\nimport QuestionBox from './QuestionBox'\nimport QuestionOptions from './QuestionOptions'\n\n\nconst Question = (props) => {\n  return (\n    <React.Fragment>\n      <Header as=\"h1\" color={(props.darkMode === false) ? 'black' : 'grey'}>\n      React Quiz\n      </Header>\n\n      <QuestionBox questions={props.questions} checkArray={props.checkArray} end={false} darkMode={props.darkMode}/>\n\n      <Divider />\n\n      <QuestionHeader counter={props.counter} question={props.question}/>\n\n      <QuestionOptions options={props.options} darkMode={props.darkMode} handleClick={props.handleClick} />\n      </React.Fragment>\n  )\n}\n\nexport default Question\n","import React from 'react'\nimport { Divider, Button } from 'semantic-ui-react'\n\nimport QuestionBox from './QuestionBox'\n\nconst End = (props) => {\n  return (\n    <React.Fragment>\n      <h1>Thanks for playing!</h1>\n\n      <QuestionBox questions = {props.questions} checkArray = {props.checkArray} end = {true}/>\n\n      <Divider />\n      <br/>\n      <br/>\n      <p>You have <b>{props.correct}/{props.length}</b> correct!</p>\n\n      <p>\n      This is {props.correct/props.length * 100}%!\n      </p>\n      <Button onClick={props.handleRestart}>Restart</Button>\n    </React.Fragment>\n  )\n}\n\n\nexport default End\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Container, Button } from 'semantic-ui-react'\n\nimport 'semantic-ui-css/semantic.min.css';\n\nimport Start from './components/Start'\nimport Question from './components/Question'\nimport End from './components/End'\n\nconst questions =\n[\n  'What is the capital of California?',\n  'What is the capital of New York?',\n  'What is the capital of Nevada',\n  'What is the capital of China?',\n  'What is the capital of California?',\n  'What is the capital of New York?',\n  'What is the capital of Nevada',\n  'What is the capital of China?'\n]\nconst options =\n[\n  ['Sacramento', 'Boise', 'New York', 'Nova Scotia'],\n  ['Albany', 'Manhattan', 'The Bronx', 'Tribeca'],\n  ['Carson City', 'Reno', 'Las Vegas', 'Portland'],\n  ['Beijing', 'Shanghai', 'Hong Kong', 'Taiwan'],\n  ['Sacramento', 'Boise', 'New York', 'Nova Scotia'],\n  ['Albany', 'Manhattan', 'The Bronx', 'Tribeca'],\n  ['Carson City', 'Reno', 'Las Vegas', 'Portland'],\n  ['Beijing', 'Shanghai', 'Hong Kong', 'Taiwan']\n]\nconst correct =\n[\n  'Sacramento', 'Albany', 'Carson City', 'Beijing',\n  'Sacramento', 'Albany', 'Carson City', 'Beijing'\n]\nlet checkArray = []\n\n// Let's us know current question\nlet counter = 0;\n\nclass App extends Component {\n  state = {\n    question: questions[counter],\n    options: options[counter],\n    correctAnswer: correct[counter],\n    correct: 0,\n    darkMode: false\n  }\n  checkIfCorrect = (e) => {\n    if (correct[counter-1] === e.target.innerHTML) {\n      this.setState({\n        correct: this.state.correct + 1\n      })\n      checkArray.push('Correct')\n    } else {\n      checkArray.push('Incorrect')\n    }\n  }\n  handleRestart = (e) => {\n    e.preventDefault()\n    counter = 0\n    this.setState({\n      correct: 0\n    })\n    this.setState({\n      question: questions[counter-1],\n      options: options[counter-1],\n      correctAnswer: correct[counter-1]\n    })\n    checkArray = []\n  }\n  handleStart = (e) => {\n    e.preventDefault()\n    counter ++\n    console.log(counter)\n    this.setState({\n      question: questions[counter-1],\n      options: options[counter-1],\n      correctAnswer: correct[counter-1]\n    })\n  }\n  handleClick = (e) => {\n    e.preventDefault()\n    this.checkIfCorrect(e)\n    counter++\n    this.setState({\n      question: questions[counter-1],\n      options: options[counter-1],\n      correctAnswer: correct[counter-1]\n    })\n  }\n  render() {\n    console.log(checkArray)\n    return (\n      <Container textAlign=\"center\" style={(this.state.darkMode === false) ? {height: '100vh', width: '60vw', padding: '3rem'} : {height: '100vh', width: '60vw', padding: '3rem', backgroundColor: 'rgba(0,0,0,0.8)', color: 'grey'}}>\n      {\n        (counter === 0) ? <Start length={questions.length} counter={counter} handleStart={this.handleStart}/> :\n        (counter - 1 === questions.length) ?\n        <End length={questions.length} correct={this.state.correct} handleRestart={this.handleRestart} questions={questions} checkArray={checkArray}/> :\n        <Question question={this.state.question} options={this.state.options} counter={counter} handleClick={this.handleClick} questions={questions} checkArray={checkArray} darkMode={this.state.darkMode}/>\n      }\n      <br/>\n      <Button style={{marginTop: '3rem'}} onClick={() => {this.setState({darkMode: !this.state.darkMode})}}>{(this.state.darkMode === false) ? \"Dark Mode\" : \"Light Mode\"}</Button>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}